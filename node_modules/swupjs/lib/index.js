'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _swup = require('swup');

var _swup2 = _interopRequireDefault(_swup);

var _loadPage = require('./modules/loadPage');

var _loadPage2 = _interopRequireDefault(_loadPage);

var _renderPage = require('./modules/renderPage');

var _renderPage2 = _interopRequireDefault(_renderPage);

var _getAnimation = require('./modules/getAnimation');

var _getAnimation2 = _interopRequireDefault(_getAnimation);

var _createAnimationPromise = require('./modules/createAnimationPromise');

var _createAnimationPromise2 = _interopRequireDefault(_createAnimationPromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// modules


var Swupjs = function (_Swup) {
    _inherits(Swupjs, _Swup);

    function Swupjs(setOptions) {
        _classCallCheck(this, Swupjs);

        var defaults = {
            animations: {
                '*': {
                    out: function out(next) {
                        next();
                    },
                    in: function _in(next) {
                        next();
                    }
                }
            }
        };

        var options = _extends({}, defaults, setOptions);

        var _this = _possibleConstructorReturn(this, (Swupjs.__proto__ || Object.getPrototypeOf(Swupjs)).call(this, options));

        _this.loadPage = _loadPage2.default;
        _this.renderPage = _renderPage2.default;
        _this.getAnimation = _getAnimation2.default;
        _this.createAnimationPromise = _createAnimationPromise2.default;


        _this.animations = options.animations;
        return _this;
    }

    /**
     * make modules accessible in instance
     */


    return Swupjs;
}(_swup2.default);

exports.default = Swupjs;